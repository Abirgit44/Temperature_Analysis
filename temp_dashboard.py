# -*- coding: utf-8 -*-
"""
Created on Mon Sep  4 22:13:29 2023

@author: 91771
"""
import streamlit as st
import pandas as pd
from pandas_profiling import ProfileReport
import plotly.express as px
import plotly.figure_factory as ff
import plotly.graph_objects as go
from statsmodels.tsa.seasonal import seasonal_decompose
import seaborn as sns
import matplotlib.pyplot as plt

# Define page functions

def home_page():
    st.title('Home Page')
    # Add content for the Home page

def data_page():
    st.title('View the Data')
    # Load and display the 'temperature.csv' data
    data = pd.read_csv('temperature_data.csv')
    st.write("Temperature Data")
    st.dataframe(data)

    st.subheader('Pandas Profiling Report')
    report = ProfileReport(data, explorative=True)
    st_profile_report(report)

def visualizations_page():
    st.title('Visualizations Page')
    # Add content for the Visualizations page

def acknowledgment_page():
    st.title('Acknowledgment Page')
    # Add content for the Acknowledgment page

# Create a dictionary to map page names to functions
pages = {
    "üè† Home": home_page,
    "üìà Data": data_page,
    "üìä Visualizations": visualizations_page,
    "üôè Acknowledgment": acknowledgment_page,
}

# Create a sidebar with page selection using a selectbox
st.sidebar.title("Navigation")
selected_page = st.sidebar.selectbox("Go to", list(pages.keys()))

# Display the selected page content
pages[selected_page]()

# Create a vertical menu with emoji icons in the sidebar
st.sidebar.markdown(
    """
    <style>
        .menu-container {
            display: flex;
            flex-direction: column;
            background-color: #333;
            padding: 10px 20px;
            color: white;
        }

        .menu-item {
            font-size: 20px;
            margin: 5px 0;
            cursor: pointer;
        }

        .menu-item:hover {
            text-decoration: underline;
        }
    </style>
    <div class="menu-container">
        <label class="menu-item" onclick="redirectTo('home')">üè† Home</label>
        <label class="menu-item" onclick="redirectTo('data')">üìà Data</label>
        <label class="menu-item" onclick="redirectTo('visualizations')">üìä Visualizations</label>
        <label class="menu-item" onclick="redirectTo('acknowledgment')">üôè Acknowledgment</label>
    </div>
    <script>
        function redirectTo(page) {
            const params = new URLSearchParams(window.location.search);
            params.set('page', page);
            window.location.search = params.toString();
        }
    </script>
    """,
    unsafe_allow_html=True,
)

page = st.experimental_get_query_params().get('page', 'Home')
# Displaying the content based on the selected page
if page == 'Home':
    st.title('Home Page')
    # Add content for the Home page
elif page == 'Data':
    st.title('View the Data')
    # Load and display the 'temperature.csv' data
    data = pd.read_csv('temperature_data.csv')
    st.write("Temperature Data")
    st.dataframe(data)
elif page == 'Visualizations':
    st.title('Visualizations Page')
    # Add content for the Visualizations page
elif page == 'Acknowledgment':
    st.title('Acknowledgment Page')
    # Add content for the Acknowledgment page


#selected_page = st.sidebar.radio(
#    "Navigation",
#    ("üè† Home", "üìà Data", "üìä Visualizations", "üôè Acknowledgment"),
#    index=0,
#)


description_style = """
    font-size: 18px;
    color: #3366ff;
    margin-bottom: 10px;
"""

emoji_style = """
    font-size: 28px;
    margin-right: 10px;
"""



# Load the dataset
@st.cache(allow_output_mutation=True)
def load_data():
    data = pd.read_csv('temperature_data.csv', encoding='ISO-8859-1')
    data.dropna(inplace=True)
    data.reset_index(drop=True, inplace=True)
    return data

# Select a visualization option
visualization_option = st.sidebar.selectbox('Select a Visualization', ('Monthly Trends', 'Heatmap', 'Line Trend', 'Seasonal Decomposition', '3D Surface Plot with Contours', 'Parallel Coordinates', 'Polar Scatter', 'Animated Heatmap','Histogram of Annual Temperature'))
with st.sidebar.expander("About the Project :flashlight:"):
        st.markdown('''**Hi everyone :smile:**''')
        st.markdown('''**This is an application based on [:blue[historical] :blue[temperature] :blue[dataset]](https://data.gov.in/resource/monthly-seasonal-and-annual-mean-temperature-series-period-1901-2021) generated by :violet[IMD] :violet[Pune] from :orange[1901] to :orange[2021].**''')
        st.markdown('''Here I have applied different kind of visualization to generate major informations or patterns from the dataset.''')



data = load_data()

# Set the title of the app
st.title('Temperature Data Dashboard :bar_chart:')



if visualization_option == 'Monthly Trends':
    st.header('Monthly Temperature Trends')
    st.markdown("""
    <span style="{}">üìä Explore the monthly temperature trends over the years.</span>
    """.format(description_style), unsafe_allow_html=True)
    fig = go.Figure()

    # Add traces for each month
    for month in data.columns[1:13]:
        fig.add_trace(go.Scatter(x=data['YEAR'], y=data[month], mode='lines', name=month))

    # Update layout
    fig.update_layout(title='Interactive Time Series Plot with Range Selector')
    fig.update_xaxes(title='Year', rangeslider_visible=True)

    # Display the plot
    st.plotly_chart(fig)

elif visualization_option == 'Heatmap':
    st.header('Monthly Temperature Heatmap')
    st.markdown("""
    <span style="{}">üå°Ô∏è The heatmap provides a visual representation of temperature data over time.</span></br>
    <span style="{}">Whiter shades represent higher temperatures, while bluish shades indicate cooler temperatures.</span>
    """.format(description_style, emoji_style), unsafe_allow_html=True)
    heatmap_data = data[['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']]
    fig_heatmap = go.Figure(data=go.Heatmap(z=heatmap_data.values, x=heatmap_data.columns, y=data['YEAR']))
    fig_heatmap.update_layout(title='Monthly Temperature Heatmap')
    st.plotly_chart(fig_heatmap)

elif visualization_option == 'Line Trend':
        st.header('Temperature Trend Visualization')
        st.markdown("""
        <span style="{}">üéª Visualize temperature distributions over time based on violin plotting concept.</span></br>
        <span style="{}">It shows the spread of temperature values for each year.</span>
        """.format(description_style, emoji_style), unsafe_allow_html=True)

        # Create a violin plot
        fig = px.violin(data, x='YEAR', y='ANNUAL', box=True, points="all")

        # Calculate the mean
        mean_data = data.groupby('YEAR')['ANNUAL'].mean().reset_index()

        # Create a trace for the mean
        mean_trace = px.line(mean_data, x='YEAR', y='ANNUAL', labels={'YEAR': 'Year', 'ANNUAL': 'Mean'})
        fig.add_trace(mean_trace.data[0])

        # Customize the appearance of the plot
        fig.update_traces(marker=dict(size=4, opacity=0.5),
                          line_color='red', fillcolor='lightblue')

        # Customize layout options
        fig.update_layout(title='Plot of Annual Temperature Trends with Mean',
                          xaxis_title='Year',
                          yaxis_title='Annual Temperature',
                          font=dict(size=12),
                          template='plotly_white')

        # Display the plot
        st.plotly_chart(fig)



elif visualization_option == 'Seasonal Decomposition':
    st.header('Seasonal Decomposition')
    st.markdown("""
    <span style="{}">üìà Seasonal decomposition breaks down temperature data into its components: trend, seasonal, and residual.</span></br>
    <span style="{}">It helps identify recurring patterns and anomalies.</span>
    """.format(description_style, emoji_style), unsafe_allow_html=True)
    decomposition = seasonal_decompose(data['ANNUAL'], model='additive', period=12)
    fig_seasonal = go.Figure()
    fig_seasonal.add_trace(go.Scatter(x=data['YEAR'], y=decomposition.trend, mode='lines', name='Trend'))
    fig_seasonal.add_trace(go.Scatter(x=data['YEAR'], y=decomposition.seasonal, mode='lines', name='Seasonal'))
    fig_seasonal.add_trace(go.Scatter(x=data['YEAR'], y=decomposition.resid, mode='lines', name='Residual'))
    fig_seasonal.update_layout(title='Seasonal Decomposition of Annual Temperature')
    st.plotly_chart(fig_seasonal)




elif visualization_option == '3D Surface Plot with Contours':
    st.header('3D Surface Plot with Contours')
    st.markdown("""
    <span style="{}">üåã Explore temperature trends in a 3D surface plot with contour lines.</span></br>
    <span style="{}">Contours help visualize temperature changes over time.</span>
    """.format(description_style, emoji_style), unsafe_allow_html=True)
    fig = go.Figure(data=[
        go.Surface(z=data.iloc[:, 1:13].values, colorscale='Viridis')
    ])

    # Add contour lines
    fig.update_traces(contours_z=dict(show=True, usecolormap=True,
                                      highlightcolor="limegreen", project_z=True))

    fig.update_layout(scene=dict(zaxis_title='Temperature'), title='3D Surface Plot of Monthly Temperature Trends with Contours')
    st.plotly_chart(fig)

elif visualization_option == 'Parallel Coordinates':
    st.header('Parallel Coordinates Plot')
    st.markdown("""
    <span style="{}">üåê Visualize the relationship between multiple temperature attributes using parallel coordinates.</span></br>
    <span style="{}">It's a great way to spot patterns and trends.</span>
    """.format(description_style, emoji_style), unsafe_allow_html=True)
    fig = px.parallel_coordinates(data, dimensions=data.columns[1:13], color='ANNUAL',
                                  color_continuous_scale=px.colors.sequential.Viridis,
                                  title='Parallel Coordinates Plot of Monthly Temperature Trends')
    st.plotly_chart(fig)

elif visualization_option == 'Polar Scatter':
    st.header('Polar Scatter Plot')
    st.markdown("""
    <span style="{}">üåü Discover temperature patterns with a polar scatter plot.</span></br>
    <span style="{}">The radial axis represents temperature values, and the angular axis represents months.</span>
    """.format(description_style, emoji_style), unsafe_allow_html=True)
    fig = px.scatter_polar(data, r=data.columns[1:13], theta=data.columns[1:13],
                           title='Polar Scatter Plot of Monthly Temperature Trends')
    fig.update_layout(polar=dict(radialaxis=dict(title='Temperature')))
    st.plotly_chart(fig)

elif visualization_option == 'Animated Heatmap':
    st.header('Animated Heatmap')
    st.markdown("""
    <span style="{}">üé• Watch temperature changes over time with an animated heatmap.</span></br>
    <span style="{}">It's an intuitive way to see how temperatures evolve.</span>
    """.format(description_style, emoji_style), unsafe_allow_html=True)
    heatmap_data = data[['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']].values.T
    fig = px.imshow(heatmap_data, labels=dict(x='Year', y='Month', color='Temperature'),
                    x=data['YEAR'], y=data.columns[1:13], color_continuous_scale='Viridis',
                    title='Animated Heatmap of Monthly Temperature Trends Over the Years')
    fig.update_xaxes(type='category')
    st.plotly_chart(fig)

st.subheader('Histogram of Annual Temperature')
fig_hist = px.histogram(data, x='ANNUAL', title='Histogram of Annual Temperature')
st.plotly_chart(fig_hist)


st.subheader('Interactive Time Series Plot')
data['YEAR'] = pd.to_datetime(data['YEAR'], format='%Y')
fig_timeseries = px.line(data, x='YEAR', y='ANNUAL', title='Interactive Time Series Plot of Annual Temperature')
st.plotly_chart(fig_timeseries)


st.subheader('Violin Plot with Time Series')

# Create a violin plot
fig = px.violin(data, x='YEAR', y='ANNUAL', box=True, points="all")
st.plotly_chart(fig)

st.subheader('Scatter Plot Matrix')
scatter_matrix = sns.pairplot(data=data.iloc[:, 1:13])
st.pyplot(scatter_matrix)


corr_matrix = data.iloc[:, 1:13].corr()

# Create a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title('Correlation Heatmap of Monthly Temperatures')
st.set_option('deprecation.showPyplotGlobalUse', False)
st.pyplot()


plt.figure(figsize=(10, 6))
sns.boxplot(data=data.iloc[:, 1:13], orient='v', palette='Set2', showfliers=True)
plt.title('Box Plot of Monthly Temperatures with Outliers')
st.set_option('deprecation.showPyplotGlobalUse', False)
st.pyplot()


fig = px.scatter_3d(data, x='YEAR', y='ANNUAL', z='ANNUAL', color='ANNUAL',
                    color_continuous_scale='Viridis',
                    title='3D Scatter Plot of Annual Temperature Trends')
st.plotly_chart(fig)
